// Code generated by github.com/jolfzverb/codegen; DO NOT EDIT.

package def

import (
	"encoding/json"
	"github.com/go-chi/chi/v5"
	"github.com/go-faster/errors"
	"github.com/go-playground/validator/v10"
)

type Handler struct {
	validator *validator.Validate
}

func NewHandler() *Handler {
	return &Handler{validator: validator.New(validator.WithRequiredStructEnabled())}
}
func (h *Handler) AddRoutes(router chi.Router) {
}
func containsNull(data json.RawMessage) bool {
	var temp any
	err := json.Unmarshal(data, &temp)
	if err != nil {
		return false
	}
	return temp == nil
}
func ValidateNewResourseRequestJSON(jsonData json.RawMessage) error {
	requiredFields := map[string]bool{"name": true}
	nullableFields := map[string]bool{}
	var obj map[string]json.RawMessage
	err := json.Unmarshal(jsonData, &obj)
	if err != nil {
		return err
	}
	var val json.RawMessage
	var exists bool
	for field := range requiredFields {
		val, exists = obj[field]
		if !exists {
			return errors.New("field " + field + " is required")
		}
		if !nullableFields[field] && containsNull(val) {
			return errors.New("field " + field + " cannot be null")
		}
	}
	return nil
}
func ValidateNewResourseResponseJSON(jsonData json.RawMessage) error {
	requiredFields := map[string]bool{"count": true, "name": true, "param": true}
	nullableFields := map[string]bool{}
	var obj map[string]json.RawMessage
	err := json.Unmarshal(jsonData, &obj)
	if err != nil {
		return err
	}
	var val json.RawMessage
	var exists bool
	for field := range requiredFields {
		val, exists = obj[field]
		if !exists {
			return errors.New("field " + field + " is required")
		}
		if !nullableFields[field] && containsNull(val) {
			return errors.New("field " + field + " cannot be null")
		}
	}
	return nil
}
