// Code generated by github.com/jolfzverb/codegen; DO NOT EDIT.

package api3

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"github.com/go-chi/chi/v5"
	"github.com/go-playground/validator/v10"
	"github.com/jolfzverb/codegen/test/testdata/generated/api3/api3models"
	"github.com/jolfzverb/codegen/test/testdata/generated/def/defmodels"
)

type CreateHandler interface {
	HandleCreate(ctx context.Context, r api3models.CreateRequest) (*api3models.CreateResponse, error)
}
type Handler struct {
	validator *validator.Validate
	create    CreateHandler
}

func NewHandler(create CreateHandler) *Handler {
	return &Handler{validator: validator.New(validator.WithRequiredStructEnabled()), create: create}
}
func (h *Handler) AddRoutes(router chi.Router) {
	router.Get("/path/to/resourse", h.handleCreate)
}
func (h *Handler) parseCreateRequest(r *http.Request) (*api3models.CreateRequest, error) {
	return &api3models.CreateRequest{}, nil
}
func Create200Response(body defmodels.NewResourseResponse) *api3models.CreateResponse {
	return &api3models.CreateResponse{StatusCode: 200, Response200: &api3models.CreateResponse200{Body: body}}
}
func (h *Handler) writeCreate200Response(w http.ResponseWriter, r *api3models.CreateResponse200) {
	var err error
	err = json.NewEncoder(w).Encode(r.Body)
	if err != nil {
		http.Error(w, "{\"error\":\"InternalServerError\"}", http.StatusInternalServerError)
		return
	}
}
func (h *Handler) writeCreateResponse(w http.ResponseWriter, response *api3models.CreateResponse) {
	switch response.StatusCode {
	case 200:
		if response.Response200 == nil {
			http.Error(w, "{\"error\":\"InternalServerError\"}", http.StatusInternalServerError)
			return
		}
		h.writeCreate200Response(w, response.Response200)
	}
	w.WriteHeader(response.StatusCode)
}
func (h *Handler) handleCreateRequest(w http.ResponseWriter, r *http.Request) {
	request, err := h.parseCreateRequest(r)
	if err != nil {
		http.Error(w, fmt.Sprintf("{\"error\":%s}", strconv.Quote(err.Error())), http.StatusBadRequest)
		return
	}
	ctx := r.Context()
	response, err := h.create.HandleCreate(ctx, *request)
	if err != nil || response == nil {
		http.Error(w, "{\"error\":\"InternalServerError\"}", http.StatusInternalServerError)
		return
	}
	h.writeCreateResponse(w, response)
	return
}
func (h *Handler) handleCreate(w http.ResponseWriter, r *http.Request) {
	switch r.Header.Get("Content-Type") {
	case "application/json":
		h.handleCreateRequest(w, r)
		return
	case "":
		h.handleCreateRequest(w, r)
		return
	default:
		http.Error(w, "{\"error\":\"Unsupported Content-Type\"}", http.StatusUnsupportedMediaType)
		return
	}
}
