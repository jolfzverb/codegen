package generator

import (
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"io"
	"slices"
	"sort"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-faster/errors"
)

type HandlersFile struct {
	requiredFieldsArePointers bool
	importPrefix              string
	packageName               *ast.Ident
	packageImports            []string
	interfaceDecls            []*ast.GenDecl

	handlerDecl            *ast.GenDecl
	handlerDeclQAFieldList *ast.FieldList // quick access to handler struct field list

	handlerConstructorDecl                       *ast.FuncDecl
	handlerConstructorDeclQAArgs                 *ast.FieldList    // quick access to handler constructor args
	handlerConstructorDeclQAConstructorComposite *ast.CompositeLit // quick access to handler struct initializer

	addRoutesDecl        *ast.FuncDecl
	handleDeclQASwitches map[string]*ast.BlockStmt
	restDecls            []*ast.FuncDecl
}

func (h *HandlersFile) InitImports(modelsImportPath string) {
	h.AddImport("github.com/go-playground/validator/v10")
	h.AddImport(modelsImportPath)
	h.AddImport("context")
	h.AddImport("github.com/go-chi/chi/v5")
	h.AddImport("net/http")
}

func (h *HandlersFile) InitHandlerStruct() {
	fieldList := &ast.FieldList{
		List: []*ast.Field{Field("validator", Star(Sel(I("validator"), "Validate")), "")},
	}
	handlerDecl := &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: I("Handler"),
				Type: &ast.StructType{
					Fields: fieldList,
				},
			},
		},
	}
	h.handlerDecl = handlerDecl
	h.handlerDeclQAFieldList = fieldList
}

func (h *HandlersFile) InitHandlerConstructor() {
	initializerComposite := &ast.CompositeLit{
		Type: I("Handler"),
		Elts: []ast.Expr{
			&ast.KeyValueExpr{
				Key: I("validator"),
				Value: &ast.CallExpr{
					Fun: Sel(I("validator"), "New"),
					Args: []ast.Expr{
						&ast.CallExpr{
							Fun: Sel(I("validator"), "WithRequiredStructEnabled"),
						},
					},
				},
			},
		},
	}

	h.handlerConstructorDecl = Func(
		"NewHandler",
		nil,
		nil,
		FieldA(Field("", Star(I("Handler")), "")),
		[]ast.Stmt{Ret1(Amp(initializerComposite))},
	)

	h.handlerConstructorDeclQAArgs = h.handlerConstructorDecl.Type.Params
	h.handlerConstructorDeclQAConstructorComposite = initializerComposite
}

func (h *HandlersFile) InitRoutesFunc() {
	h.addRoutesDecl = Func(
		"AddRoutes",
		Field("h", Star(I("Handler")), ""),
		FieldA(Field("router", Sel(I("chi"), "Router"), "")),
		nil,
		[]ast.Stmt{},
	)
}

func (h *HandlersFile) InitFields(packageName string, modelsImportPath string) {
	h.packageName = I(packageName)

	h.InitImports(modelsImportPath)

	h.InitHandlerStruct()

	h.InitHandlerConstructor()

	h.InitRoutesFunc()
}

func NewHandlersFile(packageName string, importPrefix string, modelsImportPath string, requiredFieldsArePointers bool) *HandlersFile {
	h := &HandlersFile{
		importPrefix:              importPrefix,
		requiredFieldsArePointers: requiredFieldsArePointers,
	}
	h.InitFields(packageName, modelsImportPath)

	return h
}

func (h *HandlersFile) WriteToOutput(output io.Writer) error {
	const op = "generator.HandlersFile.WriteToOutput"
	// go/ast package is great!
	_, err := output.Write([]byte("// Code generated by github.com/jolfzverb/codegen; DO NOT EDIT.\n\n"))
	if err != nil {
		return errors.Wrap(err, op)
	}

	file := h.GenerateFile()
	err = format.Node(output, token.NewFileSet(), file)
	if err != nil {
		return errors.Wrap(err, op)
	}

	return nil
}

func (h *HandlersFile) AddInterface(name string, methodName string, requestName string, responseName string) {
	var methodParams []*ast.Field
	methodParams = append(methodParams, Field("ctx", Sel(I("context"), "Context"), ""))
	methodParams = append(methodParams, Field("r", Sel(I("models"), requestName), ""))
	var methodResults []*ast.Field
	methodResults = append(methodResults, Field("", Star(Sel(I("models"), responseName)), ""))
	methodResults = append(methodResults, Field("", I("error"), ""))
	h.interfaceDecls = append(h.interfaceDecls, &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: I(name),
				Type: &ast.InterfaceType{
					Methods: &ast.FieldList{
						List: []*ast.Field{{
							Names: []*ast.Ident{I(methodName)},
							Type: &ast.FuncType{
								Params: &ast.FieldList{
									List: methodParams,
								},
								Results: &ast.FieldList{
									List: methodResults,
								},
							},
						}},
					},
				},
			},
		},
	})
}

func (h *HandlersFile) AddDependencyToHandler(baseName string) {
	fieldName := GoIdentLowercase(baseName)

	h.handlerDeclQAFieldList.List = append(h.handlerDeclQAFieldList.List,
		Field(fieldName, I(baseName+"Handler"), ""))

	h.handlerConstructorDeclQAArgs.List = append(h.handlerConstructorDeclQAArgs.List,
		Field(fieldName, I(baseName+"Handler"), ""))

	h.handlerConstructorDeclQAConstructorComposite.Elts = append(
		h.handlerConstructorDeclQAConstructorComposite.Elts, &ast.KeyValueExpr{
			Key:   I(fieldName),
			Value: I(fieldName),
		},
	)
}

func (h *HandlersFile) AddImport(path string) {
	if slices.Contains(h.packageImports, path) {
		return
	}
	h.packageImports = append(h.packageImports, path)
}

func (h *HandlersFile) GenerateImportsSpecs(imp []string) ([]*ast.ImportSpec, []ast.Spec) {
	var systemImports []string //nolint:prealloc
	var libImports []string
	var myImports []string
	for _, path := range imp {
		if strings.HasPrefix(path, h.importPrefix) {
			myImports = append(myImports, path)

			continue
		}
		prefix := strings.SplitN(path, "/", 2)[0] //nolint:mnd
		if strings.Contains(prefix, ".") {
			libImports = append(libImports, path)

			continue
		}
		systemImports = append(systemImports, path)
	}

	sort.Strings(systemImports)
	sort.Strings(libImports)
	sort.Strings(myImports)

	specs := make([]*ast.ImportSpec, 0, len(imp))
	for _, path := range systemImports {
		specs = append(specs, &ast.ImportSpec{Path: Str(path)})
	}

	// Add a space to separate system and library imports
	// but go/ast is too great for that
	for _, path := range libImports {
		specs = append(specs, &ast.ImportSpec{Path: Str(path)})
	}

	// Add a space to separate library and user imports
	// but go/ast is too great for that
	for _, path := range myImports {
		specs = append(specs, &ast.ImportSpec{Path: Str(path)})
	}

	declSpecs := make([]ast.Spec, 0, len(specs))
	for _, spec := range specs {
		declSpecs = append(declSpecs, spec)
	}

	return specs, declSpecs
}

func (h *HandlersFile) GenerateFile() *ast.File {
	importSpecs, declSpecs := h.GenerateImportsSpecs(h.packageImports)

	h.FinalizeHandlerSwitches()

	file := &ast.File{
		Name:    h.packageName,
		Decls:   []ast.Decl{},
		Imports: importSpecs,
	}

	file.Decls = append(file.Decls, &ast.GenDecl{
		Tok:   token.IMPORT,
		Specs: declSpecs,
	})
	for _, d := range h.interfaceDecls {
		file.Decls = append(file.Decls, d)
	}

	file.Decls = append(file.Decls, h.handlerDecl)
	file.Decls = append(file.Decls, h.handlerConstructorDecl)
	file.Decls = append(file.Decls, h.addRoutesDecl)
	for _, d := range h.restDecls {
		file.Decls = append(file.Decls, d)
	}

	return file
}

func (h *HandlersFile) AddRouteToRouter(baseName string, method string, pathName string) {
	h.addRoutesDecl.Body.List = append(h.addRoutesDecl.Body.List, &ast.ExprStmt{
		X: &ast.CallExpr{
			Fun: Sel(I("router"), method),
			Args: []ast.Expr{
				Str(pathName),
				Sel(I("h"), "handle"+baseName),
			},
		},
	})
}

func (h *HandlersFile) GetHandler(baseName string) *ast.BlockStmt {
	if h.handleDeclQASwitches == nil {
		return nil
	}
	if blockStmt, ok := h.handleDeclQASwitches[baseName]; ok {
		return blockStmt
	}

	return nil
}

func (h *HandlersFile) CreateHandler(baseName string) {
	switchBody := &ast.BlockStmt{
		List: []ast.Stmt{},
	}

	handleFunc := Func(
		"handle"+baseName,
		Field("h", Star(I("Handler")), ""),
		[]*ast.Field{
			Field("w", Sel(I("http"), "ResponseWriter"), ""),
			Field("r", Star(Sel(I("http"), "Request")), ""),
		},
		nil,
		[]ast.Stmt{
			&ast.SwitchStmt{
				Tag: &ast.CallExpr{
					Fun:  Sel(I("r.Header"), "Get"),
					Args: []ast.Expr{Str("Content-Type")},
				},
				Body: switchBody,
			},
		},
	)

	h.restDecls = append(h.restDecls, handleFunc)

	if h.handleDeclQASwitches == nil {
		h.handleDeclQASwitches = make(map[string]*ast.BlockStmt)
	}
	h.handleDeclQASwitches[baseName] = switchBody
}

func (h *HandlersFile) FinalizeHandlerSwitches() {
	if h.handleDeclQASwitches == nil {
		return
	}
	for _, blockStmt := range h.handleDeclQASwitches {
		blockStmt.List = append(blockStmt.List, &ast.CaseClause{
			List: nil,
			Body: []ast.Stmt{
				&ast.ExprStmt{
					X: &ast.CallExpr{
						Fun: Sel(I("http"), "Error"),
						Args: []ast.Expr{
							I("w"),
							Str("Unsupported Content-Type"),
							Sel(I("http"), "StatusUnsupportedMediaType"),
						},
					},
				},
				Ret(),
			},
		})
	}
}

func (h *HandlersFile) AddContentTypeHandler(baseName string, rawContentType string) {
	if h.handleDeclQASwitches == nil {
		return
	}
	if blockStmt, ok := h.handleDeclQASwitches[baseName]; ok {
		stmts := []ast.Stmt{
			&ast.ExprStmt{
				X: &ast.CallExpr{
					Fun: Sel(I("h"), "handle"+baseName+"Request"),
					Args: []ast.Expr{
						I("w"),
						I("r"),
					},
				},
			},
			Ret(),
		}

		blockStmt.List = append(blockStmt.List, &ast.CaseClause{
			List: []ast.Expr{Str(rawContentType)},
			Body: stmts,
		},
		)

		if rawContentType == applicationJSONCT {
			blockStmt.List = append(blockStmt.List, &ast.CaseClause{
				List: []ast.Expr{Str("")},
				Body: stmts,
			})
		}
	}
}

func (h *HandlersFile) AddHandleOperationMethod(baseName string) {
	h.restDecls = append(h.restDecls, Func(
		"handle"+baseName+"Request",
		Field("h", Star(I("Handler")), ""),
		[]*ast.Field{
			Field("w", Sel(I("http"), "ResponseWriter"), ""),
			Field("r", Star(Sel(I("http"), "Request")), ""),
		},
		nil,
		[]ast.Stmt{
			&ast.AssignStmt{
				Lhs: []ast.Expr{
					I("request"),
					I("err"),
				},
				Tok: token.DEFINE,
				Rhs: []ast.Expr{
					&ast.CallExpr{
						Fun: Sel(I("h"), "parse"+baseName+"Request"),
						Args: []ast.Expr{
							I("r"),
						},
					},
				},
			},
			&ast.IfStmt{
				Cond: Ne(I("err"), I("nil")),
				Body: &ast.BlockStmt{
					List: []ast.Stmt{
						&ast.ExprStmt{
							X: &ast.CallExpr{
								Fun: Sel(I("http"), "Error"),
								Args: []ast.Expr{
									I("w"),
									&ast.CallExpr{
										Fun:  Sel(I("err"), "Error"),
										Args: []ast.Expr{},
									},
									Sel(I("http"), "StatusBadRequest"),
								},
							},
						},
						Ret(),
					},
				},
			},
			&ast.AssignStmt{
				Lhs: []ast.Expr{
					I("ctx"),
				},
				Tok: token.DEFINE,
				Rhs: []ast.Expr{
					&ast.CallExpr{
						Fun:  Sel(I("r"), "Context"),
						Args: []ast.Expr{},
					},
				},
			},
			&ast.AssignStmt{
				Lhs: []ast.Expr{
					I("response"),
					I("err"),
				},
				Tok: token.DEFINE,
				Rhs: []ast.Expr{
					&ast.CallExpr{
						Fun: Sel(Sel(I("h"), GoIdentLowercase(baseName)), "Handle"+baseName),
						Args: []ast.Expr{
							I("ctx"),
							Star(I("request")),
						},
					},
				},
			},
			&ast.IfStmt{
				Cond: &ast.BinaryExpr{
					X:  Ne(I("err"), I("nil")),
					Op: token.LOR,
					Y:  Eq(I("response"), I("nil")),
				},
				Body: &ast.BlockStmt{
					List: []ast.Stmt{
						&ast.ExprStmt{
							X: &ast.CallExpr{
								Fun: Sel(I("http"), "Error"),
								Args: []ast.Expr{
									I("w"),
									Str("{\"error\":\"InternalServerError\"}"),
									Sel(I("http"), "StatusInternalServerError"),
								},
							},
						},
						Ret(),
					},
				},
			},
			&ast.ExprStmt{
				X: &ast.CallExpr{
					Fun: Sel(I("h"), "write"+baseName+"Response"),
					Args: []ast.Expr{
						I("w"),
						I("response"),
					},
				},
			},
			Ret(),
		},
	))
}

func (h *HandlersFile) AddWriteResponseMethod(baseName string, codes []string) {
	switchBody := &ast.BlockStmt{
		List: []ast.Stmt{},
	}
	for _, code := range codes {
		switchBody.List = append(switchBody.List, &ast.CaseClause{
			List: []ast.Expr{
				&ast.BasicLit{
					Kind:  token.INT,
					Value: code,
				},
			},
			Body: []ast.Stmt{
				&ast.IfStmt{
					Cond: Eq(Sel(I("response"), "Response"+code), I("nil")),
					Body: &ast.BlockStmt{
						List: []ast.Stmt{
							&ast.ExprStmt{
								X: &ast.CallExpr{
									Fun: Sel(I("http"), "Error"),
									Args: []ast.Expr{
										I("w"),
										Str("{\"error\":\"InternalServerError\"}"),
										Sel(I("http"), "StatusInternalServerError"),
									},
								},
							},
							Ret(),
						},
					},
				},
				&ast.ExprStmt{
					X: &ast.CallExpr{
						Fun: Sel(I("h"), "write"+baseName+code+"Response"),
						Args: []ast.Expr{
							I("w"),
							Sel(I("response"), "Response"+code),
						},
					},
				},
			},
		})
	}

	writeResponseFunc := Func(
		"write"+baseName+"Response",
		Field("h", Star(I("Handler")), ""),
		[]*ast.Field{
			Field("w", Sel(I("http"), "ResponseWriter"), ""),
			Field("response", Star(Sel(I("models"), baseName+"Response")), ""),
		},
		nil,
		[]ast.Stmt{
			&ast.SwitchStmt{
				Tag:  Sel(I("response"), "StatusCode"),
				Body: switchBody,
			},
			&ast.ExprStmt{
				X: &ast.CallExpr{
					Fun:  Sel(I("w"), "WriteHeader"),
					Args: []ast.Expr{Sel(I("response"), "StatusCode")},
				},
			},
		},
	)

	h.restDecls = append(h.restDecls, writeResponseFunc)
}

func (h *HandlersFile) AddWriteResponseCode(baseName string, code string, response *openapi3.ResponseRef) error {
	var body []ast.Stmt

	if len(response.Value.Headers) > 0 {
		h.AddImport("encoding/json")
		body = append(body, &ast.AssignStmt{
			Lhs: []ast.Expr{
				I("headersJSON"),
				I("err"),
			},
			Tok: token.DEFINE,
			Rhs: []ast.Expr{
				&ast.CallExpr{
					Fun:  Sel(I("json"), "Marshal"),
					Args: []ast.Expr{Sel(I("r"), "Headers")},
				},
			},
		})
		body = append(body, &ast.IfStmt{
			Cond: Ne(I("err"), I("nil")),
			Body: &ast.BlockStmt{
				List: []ast.Stmt{
					&ast.ExprStmt{
						X: &ast.CallExpr{
							Fun: Sel(I("http"), "Error"),
							Args: []ast.Expr{
								I("w"),
								Str("{\"error\":\"InternalServerError\"}"),
								Sel(I("http"), "StatusInternalServerError"),
							},
						},
					},
					Ret(),
				},
			},
		})
		body = append(body, &ast.DeclStmt{
			Decl: &ast.GenDecl{
				Tok: token.VAR,
				Specs: []ast.Spec{
					&ast.ValueSpec{
						Names: []*ast.Ident{I("headers")},
						Type: &ast.MapType{
							Key:   I("string"),
							Value: I("string"),
						},
					},
				},
			},
		})
		body = append(body, &ast.AssignStmt{
			Lhs: []ast.Expr{I("err")},
			Tok: token.ASSIGN,
			Rhs: []ast.Expr{
				&ast.CallExpr{
					Fun: Sel(I("json"), "Unmarshal"),
					Args: []ast.Expr{
						I("headersJSON"),
						Amp(I("headers")),
					},
				},
			},
		})
		body = append(body, &ast.IfStmt{
			Cond: Ne(I("err"), I("nil")),
			Body: &ast.BlockStmt{
				List: []ast.Stmt{
					&ast.ExprStmt{
						X: &ast.CallExpr{
							Fun: Sel(I("http"), "Error"),
							Args: []ast.Expr{
								I("w"),
								Str("{\"error\":\"InternalServerError\"}"),
								Sel(I("http"), "StatusInternalServerError"),
							},
						},
					},
					Ret(),
				},
			},
		})
		body = append(body, &ast.RangeStmt{
			Key:   I("key"),
			Value: I("value"),
			Tok:   token.DEFINE,
			X:     I("headers"),
			Body: &ast.BlockStmt{
				List: []ast.Stmt{
					&ast.ExprStmt{
						X: &ast.CallExpr{
							Fun: Sel(&ast.CallExpr{
								Fun:  Sel(I("w"), "Header"),
								Args: []ast.Expr{},
							}, "Set"),
							Args: []ast.Expr{
								I("key"),
								I("value"),
							},
						},
					},
				},
			},
		})
	}

	if len(response.Value.Content) > 1 {
		return errors.New("multiple responses are not supported")
	}
	for key, value := range response.Value.Content {
		if key != applicationJSONCT {
			return errors.New("only application/json content type is supported")
		}
		if value.Schema != nil {
			h.AddImport("encoding/json")
			body = append(body, &ast.AssignStmt{
				Lhs: []ast.Expr{I("err")},
				Tok: token.ASSIGN,
				Rhs: []ast.Expr{
					&ast.CallExpr{
						Fun: Sel(&ast.CallExpr{
							Fun:  Sel(I("json"), "NewEncoder"),
							Args: []ast.Expr{I("w")},
						}, "Encode"),

						Args: []ast.Expr{Sel(I("r"), "Body")},
					},
				},
			})
			body = append(body, &ast.IfStmt{
				Cond: Ne(I("err"), I("nil")),
				Body: &ast.BlockStmt{
					List: []ast.Stmt{
						&ast.ExprStmt{
							X: &ast.CallExpr{
								Fun: Sel(I("http"), "Error"),
								Args: []ast.Expr{
									I("w"),
									Str("{\"error\":\"InternalServerError\"}"),
									Sel(I("http"), "StatusInternalServerError"),
								},
							},
						},
						Ret(),
					},
				},
			})
		}
	}

	if len(body) > 0 {
		body = append([]ast.Stmt{&ast.DeclStmt{
			Decl: &ast.GenDecl{
				Tok: token.VAR,
				Specs: []ast.Spec{
					&ast.ValueSpec{
						Names: []*ast.Ident{I("err")},
						Type:  I("error"),
					},
				},
			},
		}}, body...)
	}

	writeResponseFunc := Func(
		"write"+baseName+code+"Response",
		Field("h", Star(I("Handler")), ""),
		[]*ast.Field{
			Field("w", Sel(I("http"), "ResponseWriter"), ""),
			Field("r", Star(Sel(I("models"), baseName+"Response"+code)), ""),
		},
		nil,
		body,
	)

	h.restDecls = append(h.restDecls, writeResponseFunc)

	return nil
}

func (h *HandlersFile) AddParsePathParamsMethod(baseName string, params openapi3.Parameters) error {
	bodyList := []ast.Stmt{
		&ast.DeclStmt{
			Decl: &ast.GenDecl{
				Tok: token.VAR,
				Specs: []ast.Spec{
					&ast.ValueSpec{
						Names: []*ast.Ident{I("pathParams")},
						Type:  Sel(I("models"), baseName+"PathParams"),
					},
				},
			},
		},
	}

	for _, param := range params {
		if param.Value.Schema == nil || param.Value.Schema.Value == nil {
			continue
		}

		varName := GoIdentLowercase(FormatGoLikeIdentifier(param.Value.Name))
		bodyList = append(bodyList, &ast.AssignStmt{
			Lhs: []ast.Expr{I(varName)},
			Tok: token.DEFINE,
			Rhs: []ast.Expr{
				&ast.CallExpr{
					Fun:  Sel(I("chi"), "URLParam"),
					Args: []ast.Expr{I("r"), Str(param.Value.Name)},
				},
			},
		})
		bodyList = append(bodyList, &ast.IfStmt{
			Cond: Eq(I(varName), Str("")),
			Body: &ast.BlockStmt{
				List: []ast.Stmt{Ret2(I("nil"),
					&ast.CallExpr{
						Fun:  Sel(I("errors"), "New"),
						Args: []ast.Expr{Str(param.Value.Name + " path param is required")},
					},
				)},
			},
		})
		h.AddImport("github.com/go-faster/errors")
		switch {
		case param.Value.Schema.Value.Type.Permits("string"):
			bodyList = append(bodyList, &ast.AssignStmt{
				Lhs: []ast.Expr{Sel(I("pathParams"), FormatGoLikeIdentifier(param.Value.Name))},
				Tok: token.ASSIGN,
				Rhs: []ast.Expr{
					I(varName),
				},
			})
		default:
			return errors.New(fmt.Sprintf("unsupported path parameter type: %v", param.Value.Schema.Value.Type)) //nolint:revive
		}
	}

	bodyList = append(bodyList, &ast.AssignStmt{
		Lhs: []ast.Expr{I("err")},
		Tok: token.DEFINE,
		Rhs: []ast.Expr{
			&ast.CallExpr{
				Fun: Sel(Sel(I("h"), "validator"), "Struct"),
				Args: []ast.Expr{
					I("pathParams"),
				},
			},
		},
	})
	bodyList = append(bodyList, &ast.IfStmt{
		Cond: Ne(I("err"), I("nil")),
		Body: &ast.BlockStmt{List: []ast.Stmt{Ret2(I("nil"), I("err"))}},
	})
	bodyList = append(bodyList, Ret2(Amp(I("pathParams")), I("nil")))

	parsePathParamsFunc := Func(
		"parse"+baseName+"PathParams",
		Field("h", Star(I("Handler")), ""),
		[]*ast.Field{
			Field("r", Star(Sel(I("http"), "Request")), ""),
		},
		[]*ast.Field{
			Field("", Star(Sel(I("models"), baseName+"PathParams")), ""),
			Field("", I("error"), ""),
		},
		bodyList,
	)

	h.restDecls = append(h.restDecls, parsePathParamsFunc)

	return nil
}
