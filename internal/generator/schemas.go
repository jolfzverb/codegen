package generator

import (
	"go/ast"
	"go/format"
	"go/token"
	"io"
	"sort"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-faster/errors"
)

type SchemasFile struct {
	requiredFieldsArePointers bool
	packageImports            []string
	decls                     []*ast.GenDecl
	generatedModels           map[string]bool
}

type SchemaStruct struct {
	Name   string
	Fields []SchemaField
}

type SchemaField struct {
	Name        string
	Type        string
	TagJSON     []string
	TagValidate []string
	Required    bool
}

func (g *Generator) NewSchemasFile() {
	g.SchemasFile = &SchemasFile{
		requiredFieldsArePointers: g.Opts.RequiredFieldsArePointers,
		generatedModels:           make(map[string]bool),
	}
}

func (g *Generator) GenerateImportsSpecsSchemas(imp []string) ([]*ast.ImportSpec, []ast.Spec) {
	var systemImports []string //nolint:prealloc
	var libImports []string
	for _, path := range imp {
		prefix := strings.SplitN(path, "/", 2)[0] //nolint:mnd
		if strings.Contains(prefix, ".") {
			libImports = append(libImports, path)

			continue
		}
		systemImports = append(systemImports, path)
	}

	sort.Strings(systemImports)
	sort.Strings(libImports)

	specs := make([]*ast.ImportSpec, 0, len(imp))
	for _, path := range systemImports {
		specs = append(specs, &ast.ImportSpec{Path: Str(path)})
	}

	// Add a space to separate system and library imports
	// but go/ast is too great for that
	for _, path := range libImports {
		specs = append(specs, &ast.ImportSpec{Path: Str(path)})
	}

	declSpecs := make([]ast.Spec, 0, len(specs))
	for _, spec := range specs {
		declSpecs = append(declSpecs, spec)
	}

	return specs, declSpecs
}

func (g *Generator) WriteSchemasToOutput(output io.Writer) error {
	const op = "generator.SchemasFile.WriteToOutput"
	// go/ast package is great!
	_, err := output.Write([]byte("// Code generated by github.com/jolfzverb/codegen; DO NOT EDIT.\n\n"))
	if err != nil {
		return errors.Wrap(err, op)
	}

	importSpecs, declSpecs := g.GenerateImportsSpecs(g.SchemasFile.packageImports)

	file := &ast.File{
		Name:    ast.NewIdent(g.PackageName + "models"),
		Imports: importSpecs,
		Decls:   []ast.Decl{},
	}

	if len(declSpecs) > 0 {
		file.Decls = append(file.Decls, &ast.GenDecl{
			Tok:   token.IMPORT,
			Specs: declSpecs,
		})
	}

	for _, decl := range g.SchemasFile.decls {
		file.Decls = append(file.Decls, decl)
	}

	err = format.Node(output, token.NewFileSet(), file)
	if err != nil {
		return errors.Wrap(err, op)
	}

	return nil
}

func (g *Generator) AddSchema(model SchemaStruct) {
	fieldList := make([]*ast.Field, 0, len(model.Fields))
	for _, field := range model.Fields {
		jsonTags := strings.Join(field.TagJSON, ",")
		validateTags := strings.Join(field.TagValidate, ",")

		var tags string
		if len(field.TagJSON) > 0 {
			tags += "json:\"" + jsonTags + "\""
		}
		if len(field.TagValidate) > 0 {
			if len(tags) > 0 {
				tags += " "
			}
			tags += "validate:\"" + validateTags + "\""
		}
		if len(tags) > 0 {
			tags = "`" + tags + "`"
		}
		var typeExpr ast.Expr
		if field.Required {
			typeExpr = ast.NewIdent(field.Type)
		} else {
			typeExpr = Star(ast.NewIdent(field.Type))
		}
		var tag *ast.BasicLit
		if len(tags) > 0 {
			tag = &ast.BasicLit{
				Kind:  token.STRING,
				Value: tags,
			}
		}
		fieldList = append(fieldList, &ast.Field{
			Names: []*ast.Ident{ast.NewIdent(field.Name)},
			Type:  typeExpr,
			Tag:   tag,
		})
	}

	g.SchemasFile.decls = append(g.SchemasFile.decls, &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: ast.NewIdent(model.Name),
				Type: &ast.StructType{
					Fields: &ast.FieldList{
						List: fieldList,
					},
				},
			},
		},
	})
}

func (g *Generator) AddTypeAlias(name string, typeName string) {
	g.SchemasFile.decls = append(g.SchemasFile.decls, &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: ast.NewIdent(name),
				Type: &ast.Ident{
					Name: typeName,
				},
			},
		},
	})
}

func (g *Generator) AddSliceAlias(name string, typeName string) {
	g.SchemasFile.decls = append(g.SchemasFile.decls, &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: ast.NewIdent(name),
				Type: &ast.ArrayType{
					Elt: ast.NewIdent(typeName),
				},
			},
		},
	})
}

func (g *Generator) AddParamsModel(baseName string, paramType string, params openapi3.Parameters) error {
	const op = "generator.AddParamsModel"
	fields := make([]SchemaField, 0, len(params))
	for _, param := range params {
		name := FormatGoLikeIdentifier(param.Value.Name)
		if !param.Value.Schema.Value.Type.Permits(openapi3.TypeString) {
			return errors.New("only string type parameters are supported for " + paramType + " parameters")
		}
		var jsonTags []string
		var validateTags []string
		jsonTags = append(jsonTags, param.Value.Name)
		if param.Value.Required {
			validateTags = append(validateTags, "required")
		} else {
			jsonTags = append(jsonTags, "omitempty")
			validateTags = append(validateTags, "omitempty")
		}

		validateTags = append(validateTags, GetSchemaValidators(param.Value.Schema)...)
		fieldType, err := g.GetFieldTypeFromSchema(name, "", param.Value.Schema)
		if err != nil {
			return errors.Wrap(err, op)
		}
		required := false
		if !g.SchemasFile.requiredFieldsArePointers {
			required = param.Value.Required
		}
		field := SchemaField{
			Name:        name,
			Type:        fieldType,
			TagJSON:     jsonTags,
			TagValidate: validateTags,
			Required:    required,
		}
		fields = append(fields, field)
	}

	model := SchemaStruct{
		Name:   baseName + paramType,
		Fields: fields,
	}
	g.AddSchema(model)

	return nil
}

func (g *Generator) AddHeadersModel(baseName string, headers openapi3.Headers) error {
	const op = "generator.AddHeadersModel"
	fields := make([]SchemaField, 0, len(headers))
	for name, header := range headers {
		if !header.Value.Schema.Value.Type.Permits(openapi3.TypeString) {
			return errors.New("only string type parameters are supported for response headers")
		}
		var jsonTags []string
		var validateTags []string
		jsonTags = append(jsonTags, name)
		if header.Value.Required {
			validateTags = append(validateTags, "required")
		} else {
			jsonTags = append(jsonTags, "omitempty")
			validateTags = append(validateTags, "omitempty")
		}

		validateTags = append(validateTags, GetSchemaValidators(header.Value.Schema)...)
		fieldType, err := g.GetFieldTypeFromSchema(FormatGoLikeIdentifier(name), "", header.Value.Schema)
		if err != nil {
			return errors.Wrap(err, op)
		}
		required := false
		if !g.SchemasFile.requiredFieldsArePointers {
			required = header.Value.Required
		}
		field := SchemaField{
			Name:        FormatGoLikeIdentifier(name),
			Type:        fieldType,
			TagJSON:     jsonTags,
			TagValidate: validateTags,
			Required:    required,
		}
		fields = append(fields, field)
	}

	model := SchemaStruct{
		Name:   baseName + "Headers",
		Fields: fields,
	}
	g.AddSchema(model)

	return nil
}

func (g *Generator) GetIntegerType(format string) string {
	integerFormats := map[string]bool{
		"int8": true, "int16": true, "int32": true, "int64": true,
		"uint8": true, "uint16": true, "uint32": true, "uint64": true,
	}
	if ok := integerFormats[format]; ok {
		return format
	}

	return "int"
}

func (g *Generator) AddSchemasImport(path string) {
	for _, imp := range g.SchemasFile.packageImports {
		if imp == path {
			return
		}
	}
	g.SchemasFile.packageImports = append(g.SchemasFile.packageImports, path)
}

func (g *Generator) GetStringType(format string) string {
	if format == "date-time" {
		g.AddSchemasImport("time")
		return "time.Time"
	}

	return "string"
}

func (g *Generator) GetDerefFieldTypeFromSchema(modelName string, fieldName string,
	fieldSchema *openapi3.SchemaRef,
) (string, error) {
	var fieldType string
	switch {
	case fieldSchema.Value.Type.Permits(openapi3.TypeString):
		fieldType = g.GetStringType(fieldSchema.Value.Format)
	case fieldSchema.Value.Type.Permits(openapi3.TypeInteger):
		fieldType = g.GetIntegerType(fieldSchema.Value.Format)
	case fieldSchema.Value.Type.Permits(openapi3.TypeNumber):
		fieldType = "float64"
	case fieldSchema.Value.Type.Permits(openapi3.TypeBoolean):
		fieldType = "bool"
	case fieldSchema.Value.Type.Permits(openapi3.TypeObject):
		if fieldSchema.Ref == "" {
			fieldType = modelName + FormatGoLikeIdentifier(fieldName)
		}
	case fieldSchema.Value.Type.Permits(openapi3.TypeArray):
		if fieldSchema.Ref == "" {
			fieldType = modelName + FormatGoLikeIdentifier(fieldName)
		}
	default:
		return "", errors.New("unsupported schema type of field " + fieldName)
	}

	return fieldType, nil
}

func (g *Generator) GetFieldTypeFromSchema(modelName string, fieldName string,
	fieldSchema *openapi3.SchemaRef,
) (string, error) {
	if fieldSchema.Ref != "" {
		typeName, importPath := g.ParseRefTypeName(fieldSchema.Ref)
		if importPath != "" {
			g.AddSchemasImport(importPath)
		}
		return typeName, nil
	}
	fieldType, err := g.GetDerefFieldTypeFromSchema(modelName, fieldName, fieldSchema)
	if err != nil {
		return "", errors.Wrapf(err, "GetFieldTypeFromSchema for field %s", fieldName)
	}
	return fieldType, nil
}

func (g *Generator) ProcessObjectSchema(modelName string, schema *openapi3.SchemaRef) error {
	const op = "generator.ProcessObjectSchema"
	model := SchemaStruct{
		Name:   modelName,
		Fields: []SchemaField{},
	}

	requiredFields := make(map[string]bool)
	for _, fieldName := range schema.Value.Required {
		requiredFields[fieldName] = true
	}

	keys := make([]string, 0, len(schema.Value.Properties))
	for key := range schema.Value.Properties {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	for _, fieldName := range keys {
		fieldSchema := schema.Value.Properties[fieldName]
		var jsonTags []string
		var validateTags []string
		jsonTags = append(jsonTags, fieldName)
		if !requiredFields[fieldName] {
			jsonTags = append(jsonTags, "omitempty")
			validateTags = append(validateTags, "omitempty")
		}

		if fieldSchema.Ref == "" {
			switch {
			case fieldSchema.Value.Type.Permits(openapi3.TypeObject):
				err := g.ProcessSchema(modelName+FormatGoLikeIdentifier(fieldName), fieldSchema)
				if err != nil {
					return errors.Wrap(err, op)
				}
			case fieldSchema.Value.Type.Permits(openapi3.TypeArray):
				err := g.ProcessSchema(modelName+FormatGoLikeIdentifier(fieldName), fieldSchema)
				if err != nil {
					return errors.Wrap(err, op)
				}
			}
		}

		if fieldSchema.Ref != "" {
			_, importPath := g.ParseRefTypeName(fieldSchema.Ref)
			if importPath != "" {
				g.AddSchemasImport(importPath)
			}
			//g.ProcessSchema(elemModelName, fieldSchema)
		}

		validateTags = append(validateTags, GetSchemaValidators(fieldSchema)...)

		fieldType, err := g.GetFieldTypeFromSchema(modelName, fieldName, fieldSchema)
		if err != nil {
			return errors.Wrapf(err, op)
		}
		required := false
		if !g.SchemasFile.requiredFieldsArePointers {
			required = requiredFields[fieldName]
		}
		field := SchemaField{
			Name:        FormatGoLikeIdentifier(fieldName),
			Type:        fieldType,
			TagJSON:     jsonTags,
			TagValidate: validateTags,
			Required:    required,
		}
		model.Fields = append(model.Fields, field)
	}
	g.AddSchema(model)

	return nil
}

func (g *Generator) ProcessTypeAlias(modelName string, schema *openapi3.SchemaRef) error {
	const op = "generator.ProcessTypeAlias"
	typeName, err := g.GetDerefFieldTypeFromSchema(modelName, "", schema)
	if err != nil {
		return errors.Wrapf(err, op)
	}
	g.AddTypeAlias(modelName, typeName)

	return nil
}

func (g *Generator) ProcessArraySchema(modelName string, schema *openapi3.SchemaRef,
) error {
	const op = "generator.ProcessArraySchema"
	var elemType string

	if schema.Value.Items.Ref == "" {
		itemsSchema := schema.Value.Items
		switch {
		case itemsSchema.Value.Type.Permits(openapi3.TypeObject):
			err := g.ProcessSchema(modelName+"Item", itemsSchema)
			if err != nil {
				return errors.Wrap(err, op)
			}
		case itemsSchema.Value.Type.Permits(openapi3.TypeArray):
			err := g.ProcessSchema(modelName+"Item", itemsSchema)
			if err != nil {
				return errors.Wrap(err, op)
			}
		}
	}

	if schema.Value.Items.Ref != "" {
		_, importPath := g.ParseRefTypeName(schema.Value.Items.Ref)
		if importPath != "" {
			g.AddSchemasImport(importPath)
		}
		//g.ProcessSchema(elemModelName, schema.Value.Items)
	}

	elemType, err := g.GetFieldTypeFromSchema(modelName, "Item", schema.Value.Items)
	if err != nil {
		return errors.Wrapf(err, op)
	}

	g.AddSliceAlias(modelName, elemType)

	return nil
}

func (g *Generator) ProcessSchema(modelName string, schema *openapi3.SchemaRef) error {
	if schema.Ref != "" && refIsExternal(schema.Ref) {
		// External references are not processed here, they should be handled separately.
		return nil
	}

	if g.SchemasFile.generatedModels[modelName] {
		return nil
	}
	g.SchemasFile.generatedModels[modelName] = true
	const op = "generator.ProcessSchema"
	switch {
	case schema.Value.Type.Permits(openapi3.TypeObject):
		err := g.ProcessObjectSchema(modelName, schema)
		if err != nil {
			return errors.Wrap(err, op)
		}
		err = g.AddObjectValidate(modelName, schema)
		if err != nil {
			return errors.Wrap(err, op)
		}

		return nil
	case schema.Value.Type.Permits(openapi3.TypeArray):
		err := g.ProcessArraySchema(modelName, schema)
		if err != nil {
			return errors.Wrap(err, op)
		}
		if schema.Value.Items != nil &&
			(schema.Value.Items.Value.Type.Permits(openapi3.TypeObject) ||
				schema.Value.Items.Value.Type.Permits(openapi3.TypeArray)) {
			err = g.AddArrayValidate(modelName, schema)
			if err != nil {
				return errors.Wrap(err, op)
			}
		}

		return nil
	case schema.Value.Type.Permits(openapi3.TypeString):
		err := g.ProcessTypeAlias(modelName, schema)
		if err != nil {
			return errors.Wrap(err, op)
		}

		return nil
	case schema.Value.Type.Permits(openapi3.TypeBoolean):
		err := g.ProcessTypeAlias(modelName, schema)
		if err != nil {
			return errors.Wrap(err, op)
		}

		return nil
	case schema.Value.Type.Permits(openapi3.TypeInteger):
		err := g.ProcessTypeAlias(modelName, schema)
		if err != nil {
			return errors.Wrap(err, op)
		}

		return nil
	case schema.Value.Type.Permits(openapi3.TypeNumber):
		err := g.ProcessTypeAlias(modelName, schema)
		if err != nil {
			return errors.Wrap(err, op)
		}

		return nil
	}

	return errors.Errorf("unsupported schema type %s for model %s", schema.Value.Type, modelName)
}

func (g *Generator) GenerateRequestModel(baseName string, contentType string, pathParams openapi3.Parameters,
	queryParams openapi3.Parameters, headers openapi3.Parameters, cookieParams openapi3.Parameters,
	body *openapi3.RequestBodyRef,
) {
	model := SchemaStruct{
		Name:   baseName + "Request",
		Fields: []SchemaField{},
	}
	if len(pathParams) > 0 {
		model.Fields = append(model.Fields, SchemaField{
			Name:        "Path",
			Type:        baseName + "PathParams",
			TagJSON:     []string{},
			TagValidate: []string{},
			Required:    true,
		})
	}
	if len(queryParams) > 0 {
		model.Fields = append(model.Fields, SchemaField{
			Name:        "Query",
			Type:        baseName + "QueryParams",
			TagJSON:     []string{},
			TagValidate: []string{},
			Required:    true,
		})
	}
	if len(headers) > 0 {
		model.Fields = append(model.Fields, SchemaField{
			Name:        "Headers",
			Type:        baseName + "Headers",
			TagJSON:     []string{},
			TagValidate: []string{},
			Required:    true,
		})
	}
	if len(cookieParams) > 0 {
		model.Fields = append(model.Fields, SchemaField{
			Name:        "Cookies",
			Type:        baseName + "Cookies",
			TagJSON:     []string{},
			TagValidate: []string{},
			Required:    true,
		})
	}
	if body != nil && body.Value != nil {
		content, ok := body.Value.Content[contentType]
		if ok && content.Schema != nil {
			typeName := baseName + "RequestBody"

			if content.Schema.Ref != "" {
				var importPath string
				typeName, importPath = g.ParseRefTypeName(content.Schema.Ref)
				if importPath != "" {
					g.AddSchemasImport(importPath)
				}
			}

			model.Fields = append(model.Fields, SchemaField{
				Name:        "Body",
				Type:        typeName,
				TagJSON:     []string{},
				TagValidate: []string{},
				Required:    body.Value.Required,
			})
		}
	}

	g.AddSchema(model)
}
