// Code generated by github.com/jolfzverb/codegen; DO NOT EDIT.

package def

import (
	"encoding/json"
	"github.com/go-chi/chi/v5"
	"github.com/go-faster/errors"
	"github.com/go-playground/validator/v10"
)

type Handler struct {
	validator *validator.Validate
}

func NewHandler() *Handler {
	return &Handler{validator: validator.New(validator.WithRequiredStructEnabled())}
}
func (h *Handler) AddRoutes(router chi.Router) {
}
func containsNull(data json.RawMessage) bool {
	var temp any
	err := json.Unmarshal(data, &temp)
	if err != nil {
		return false
	}
	return temp == nil
}
func ValidateExternalObjectJSON(jsonData json.RawMessage) error {
	var obj map[string]json.RawMessage
	err := json.Unmarshal(jsonData, &obj)
	if err != nil {
		return err
	}
	var val json.RawMessage
	var exists bool
	val, exists = obj["field2"]
	if exists && !containsNull(val) {
		err = ValidateExternalRef2JSON(val)
		if err != nil {
			return errors.Wrap(err, "field field2 is not valid")
		}
	}
	return nil
}
func ValidateExternalRef2JSON(_ json.RawMessage) error {
	return nil
}
