// Code generated by github.com/jolfzverb/codegen; DO NOT EDIT.

package apimodels

import (
	"time"
	"github.com/shopspring/decimal"
	"github.com/jolfzverb/codegen/internal/usage/generated/def/defmodels"
)

type CreatePathParams struct {
	Suffix string `json:"suffix" validate:"required,oneof=e es"`
	Param  string `json:"param" validate:"required"`
}
type CreateQueryParams struct {
	Count string `json:"count" validate:"required"`
}
type CreateHeaders struct {
	IdempotencyKey string     `json:"Idempotency-Key" validate:"required,min=1,max=100"`
	OptionalHeader *time.Time `json:"Optional-Header,omitempty" validate:"omitempty"`
}
type CreateCookies struct {
	CookieParam         *string `json:"cookie-param,omitempty" validate:"omitempty,min=10,max=15"`
	RequiredCookieParam string  `json:"required-cookie-param" validate:"required,min=10,max=15"`
}
type CreateRequestBodyArrayField []string
type CreateRequestBodyObjectArrayItem struct {
	Subfield1 *string `json:"subfield1,omitempty" validate:"omitempty"`
	Subfield2 *int    `json:"subfield2,omitempty" validate:"omitempty"`
}
type CreateRequestBodyObjectArray []CreateRequestBodyObjectArrayItem
type CreateRequestBodyObjectFieldField2 struct {
	Subfield1 *string `json:"subfield1,omitempty" validate:"omitempty"`
	Subfield2 *int    `json:"subfield2,omitempty" validate:"omitempty"`
}
type CreateRequestBodyObjectField struct {
	Field1 *string                             `json:"field1,omitempty" validate:"omitempty"`
	Field2 *CreateRequestBodyObjectFieldField2 `json:"field2,omitempty" validate:"omitempty"`
}
type CreateRequestBody struct {
	ArrayField          *CreateRequestBodyArrayField  `json:"array-field,omitempty" validate:"omitempty,dive"`
	CodeForResponse     *int                          `json:"code_for_response,omitempty" validate:"omitempty,min=100,max=999"`
	Date                *time.Time                    `json:"date,omitempty" validate:"omitempty"`
	DecimalField        *decimal.Decimal              `json:"decimal-field,omitempty" validate:"omitempty"`
	Description         *string                       `json:"description,omitempty" validate:"omitempty,min=1,max=10"`
	EnumInt             *int                          `json:"enum-int,omitempty" validate:"omitempty,oneof=1 2 3"`
	EnumNumber          *float64                      `json:"enum-number,omitempty" validate:"omitempty,oneof=1.1 2.2 3.3"`
	EnumVal             *string                       `json:"enum-val,omitempty" validate:"omitempty,oneof=value1 value2 value3"`
	ExternalRef         *defmodels.ExternalRef        `json:"external-ref,omitempty" validate:"omitempty"`
	ExternalRef2        *defmodels.ExternalObject     `json:"external-ref2,omitempty" validate:"omitempty"`
	FieldToValidateDive *ComplexObjectForDive         `json:"field_to_validate_dive,omitempty" validate:"omitempty"`
	Name                string                        `json:"name"`
	ObjectArray         *CreateRequestBodyObjectArray `json:"object-array,omitempty" validate:"omitempty,dive"`
	ObjectField         *CreateRequestBodyObjectField `json:"object-field,omitempty" validate:"omitempty"`
}
type CreateRequest struct {
	Path    CreatePathParams
	Query   CreateQueryParams
	Headers CreateHeaders
	Cookies CreateCookies
	Body    CreateRequestBody
}
type CreateResponse200Headers struct {
	IdempotencyKey *string `json:"Idempotency-Key,omitempty" validate:"omitempty"`
}
type CreateResponse200 struct {
	Body    NewResourseResponse
	Headers CreateResponse200Headers
}
type CreateResponse400 struct {
}
type CreateResponse404 struct {
}
type CreateResponse struct {
	StatusCode  int
	Response200 *CreateResponse200
	Response400 *CreateResponse400
	Response404 *CreateResponse404
}
type ComplexObjectForDiveArrayObjectsOptionalItem struct {
	Field1 string `json:"field1" validate:"min=5"`
	Field2 *int   `json:"field2,omitempty" validate:"omitempty,min=10"`
}
type ComplexObjectForDiveArrayObjectsOptional []ComplexObjectForDiveArrayObjectsOptionalItem
type ComplexObjectForDiveArrayObjectsRequiredItem struct {
	Field1 string `json:"field1" validate:"min=5"`
	Field2 *int   `json:"field2,omitempty" validate:"omitempty,min=10"`
}
type ComplexObjectForDiveArrayObjectsRequired []ComplexObjectForDiveArrayObjectsRequiredItem
type ComplexObjectForDiveArrayStringsOptional []string
type ComplexObjectForDiveArrayStringsRequired []string
type ComplexObjectForDiveArraysOfArraysItem []string
type ComplexObjectForDiveArraysOfArrays []ComplexObjectForDiveArraysOfArraysItem
type ComplexObjectForDiveObjectFieldOptional struct {
	Field1 string `json:"field1" validate:"min=5"`
	Field2 *int   `json:"field2,omitempty" validate:"omitempty,min=10"`
}
type ComplexObjectForDiveObjectFieldRequired struct {
	Field1 string `json:"field1" validate:"min=5"`
	Field2 *int   `json:"field2,omitempty" validate:"omitempty,min=10"`
}
type ComplexObjectForDive struct {
	ArrayObjectsOptional *ComplexObjectForDiveArrayObjectsOptional `json:"array_objects_optional,omitempty" validate:"omitempty,min=1,max=2,dive"`
	ArrayObjectsRequired ComplexObjectForDiveArrayObjectsRequired  `json:"array_objects_required" validate:"min=1,max=2,dive"`
	ArrayStringsOptional *ComplexObjectForDiveArrayStringsOptional `json:"array_strings_optional,omitempty" validate:"omitempty,min=1,max=2,dive"`
	ArrayStringsRequired ComplexObjectForDiveArrayStringsRequired  `json:"array_strings_required" validate:"min=1,max=2,dive"`
	ArraysOfArrays       *ComplexObjectForDiveArraysOfArrays       `json:"arrays_of_arrays,omitempty" validate:"omitempty,min=1,max=2,dive,min=1,max=2,dive,min=5"`
	ObjectFieldOptional  *ComplexObjectForDiveObjectFieldOptional  `json:"object_field_optional,omitempty" validate:"omitempty"`
	ObjectFieldRequired  ComplexObjectForDiveObjectFieldRequired   `json:"object_field_required"`
}
type NewResourseResponse struct {
	Count        string           `json:"count"`
	Date         *time.Time       `json:"date,omitempty" validate:"omitempty"`
	Date2        *time.Time       `json:"date2,omitempty" validate:"omitempty"`
	DecimalField *decimal.Decimal `json:"decimal-field,omitempty" validate:"omitempty"`
	Description  *string          `json:"description,omitempty" validate:"omitempty"`
	EnumVal      *string          `json:"enum-val,omitempty" validate:"omitempty"`
	Name         string           `json:"name"`
	Param        string           `json:"param"`
}
